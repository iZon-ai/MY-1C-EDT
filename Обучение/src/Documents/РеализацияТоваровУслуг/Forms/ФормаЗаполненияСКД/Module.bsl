
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Схема = Документы.РеализацияТоваровУслуг.ПолучитьМакет("СхемаКомпоновкиДанныхЗаполнения");
	АдресСКД = ПоместитьВоВременноеХранилище(Схема, УникальныйИдентификатор);
	
	Источник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
	КомпоновщикНастроек.Инициализировать(Источник);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	
	СтруктураПараметров = ХранилищеНастроекДанныхФорм.Загрузить("РеализацияТоваровИУслуг_ФормаЗаполнения");
	Если ТипЗнч(СтруктураПараметров)=Тип("Структура") и СтруктураПараметров.Свойство("Отбор") Тогда
		
		ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
		ЭлементыОтбора.Очистить();
		СкопироватьЭлементыОтбора(ЭлементыОтбора, СтруктураПараметров.Отбор.Элементы);		
	
	КонецЕсли;
	
	Если Параметры.Свойство("Контрагент") Тогда
		ДобавитьОтборПоКонтрагенту(КомпоновщикНастроек, Параметры.Контрагент);
		Контрагент = Параметры.Контрагент;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьОтборПоКонтрагенту(КомпоновщикНастроек, Контрагент)

	ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	ОтборПоКонтрагенту = Неопределено;
	ПолеКонтрагент = Новый ПолеКомпоновкиДанных("Контрагент");
	
	Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
	
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			и ЭлементОтбора.ЛевоеЗначение = ПолеКонтрагент Тогда
		
			ОтборПоКонтрагенту = ЭлементОтбора;
			Прервать;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Если ОтборПоКонтрагенту = Неопределено Тогда
		ОтборПоКонтрагенту = ЭлементыОтбора.Вставить(0, Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборПоКонтрагенту.ЛевоеЗначение = ПолеКонтрагент;
	КонецЕсли;
	
	ОтборПоКонтрагенту.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборПоКонтрагенту.ПравоеЗначение = Контрагент;
	ОтборПоКонтрагенту.Использование = Истина;
	
КонецПроцедуры // ДобавитьОтборПоКонтрагенту()

&НаСервереБезКонтекста
Процедура СкопироватьЭлементыОтбора(Приемник, Источник)

	Для каждого ЭлементОтбораИсточник Из Источник Цикл
		ЭлементОтбораПриемник = Приемник.Добавить(ТипЗнч(ЭлементОтбораИсточник));
		ЗаполнитьЗначенияСвойств(ЭлементОтбораПриемник, ЭлементОтбораИсточник);
		
		Если ТипЗнч(ЭлементОтбораИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьЭлементыОтбора(ЭлементОтбораПриемник.Элементы, ЭлементОтбораИсточник.Элементы);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // СкопироватьЭлементыОтбора()

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьНастройкиНаСервере(КомпоновщикНастроек.Настройки.Отбор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиНаСервере(Знач Отбор)

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Отбор", Отбор);
	
	ХранилищеНастроекДанныхФорм.Сохранить("РеализацияТоваровИУслуг_ФормаЗаполнения", , СтруктураПараметров);

КонецПроцедуры // СохранитьНастройкиНаСервере()

&НаКлиенте
Процедура ВосстановитьОтборыПоУмолчанию(Команда)
	ВосстановитьОтборыПоУмолчаниюНаСервере(КомпоновщикНастроек, АдресСКД, Контрагент);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВосстановитьОтборыПоУмолчаниюНаСервере(КомпоновщикНастроек, АдресСКД, Контрагент)
	
	ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	ЭлементыОтбора.Очистить();
	Схема = ПолучитьИзВременногоХранилища(АдресСКД);
	СкопироватьЭлементыОтбора(ЭлементыОтбора, Схема.НастройкиПоУмолчанию.Отбор.Элементы);
	ДобавитьОтборПоКонтрагенту(КомпоновщикНастроек, Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	// Этап 1
	Настройки = КомпоновщикНастроек.Настройки;
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаНачала", Период.ДатаНачала);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаКонца", Период.ДатаОкончания);
	
	Схема = ПолучитьИзВременногоХранилища(АдресСКД);
	
	КомпоновщикМакет = Новый КомпоновщикМакетаКомпоновкиДанных();
	Макет = КомпоновщикМакет.Выполнить(Схема, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Этап 2
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(Макет);
	
	// Этап 3
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ТаблицаЗначений.Колонки.Добавить("Пометка");
	ТаблицаЗначений.ЗаполнитьЗначения(Истина, "Пометка");
	
	ДанныеДляЗаполнения.Загрузить(ТаблицаЗначений);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляЗаполненияКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеДляЗаполнения.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляЗаполненияЦенаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДанныеДляЗаполнения.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляЗаполненияСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДанныеДляЗаполнения.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляЗаполненияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Строки = ДанныеДляЗаполнения.НайтиСтроки(Новый Структура("Пометка", Истина));
	
	Если Строки.Количество()>0 Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект),
					   "Данные еще не перенесены в документ! Закрыть форму?", 
					   РежимДиалогаВопрос.ДаНет);
		Отказ = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДанныеДляЗаполнения.Очистить();
		Закрыть();			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	АдресДанных = Неопределено;
	ПодготовитьДанныеНаСервере(АдресДанных);
	
	Данные = Новый Структура("АдресДанныхДляЗаполнения",АдресДанных);
	ДанныеДляЗаполнения.Очистить();
	ОповеститьОВыборе(Данные);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеНаСервере(АдресДанных)

	ТаблицаЗначений = РеквизитФормыВЗначение("ДанныеДляЗаполнения");
	ТаблицаЗначений.Очистить();
	
	Для каждого Стр Из ДанныеДляЗаполнения Цикл
	
		Если Стр.Пометка Тогда
			НовСтр = ТаблицаЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);			
		КонецЕсли;
	
	КонецЦикла;

	ТаблицаЗначений.Свернуть("ИмяТабличнойЧасти, Номенклатура, Цена", "Количество, Сумма");
	АдресДанных = ПоместитьВоВременноеХранилище(ТаблицаЗначений, УникальныйИдентификатор);
	
КонецПроцедуры // ПодготовитьДанныеНаСервере()



























